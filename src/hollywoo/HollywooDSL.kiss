(importWithDefAlias)
(import hollywoo.StagePosition)
(import hollywoo.HFloat)
(import hollywoo.Director.Appearance)
(import hollywoo.Director.StageFacing)
(import hollywoo.Director.Continuation)

(defMacro withProp [propKey name &body body]
    `(let [,name (dictGet props ,propKey)]
        ,@body
        (cc)))

// like withProp, but you promise to call CC yourself in the body:
(defMacro withPropCC [propKey name &body body]
    `(let [,name (dictGet props ,propKey)]
        ,@body))
        
(defMacro withActor [actorKey name &body body]
    `(let [,name (dictGet actors ,actorKey)]
        ,@body
        (cc)))

// like withActor, but you promise to call CC yourself in the body:
(defMacro withActorCC [actorKey name &body body]
    `(let [,name (dictGet actors ,actorKey)]
        ,@body))

// Do something with the given scene's instance of its set
(defMacro withSceneSet [sceneKey name &body body]
    `(let [,name .set (dictGet scenes ,sceneKey)]
        ,@body
        (cc)))

// like withSceneSet, but you promise to call CC yourself in the body:
(defMacro withSceneSetCC [sceneKey name &body body]
    `(let [,name .set (dictGet scenes ,sceneKey)]
        ,@body))

// When this file is loaded, all expressions in (preload <...>) will be collected. When (end) is called, they will
// be injected into a method called (doPreload).
// This allows assets to be declared in Hollywoo files where they first appear, but still loaded before execution starts.
(collectBlocks preload (#when (StringTools.contains kissFile className) (cc)))
(collectBlocks cleanup (#when (StringTools.contains kissFile className) (cc)))

(defMacro end []
    (let [collectedPreloads (getCollectedExps "preload")
            preloadFuncs
                (for exp collectedPreloads
                    `->:Void {,exp})]
        `{
            (method doPreload [:Void->Void cc]
                (director.showTitleCard ["LOADING"]
                    (makeCC
                        (set isLoading true)
                        (director.doLoading ,preloadFuncs
                            (makeCC
                                (set isLoading false)
                                (.start (director.shortcutHandler))
                                (director.hideTitleCard)
                                (cc))))))
            (method doCleanup []
                (director.cleanup)
                (set lastInstructionPointer -2)
                (collectedBlocks cleanup))
            (doCleanup)
            
            (when onComplete
                (onComplete))
        }))

(defReaderMacro &bof "" [stream] `(#when (StringTools.contains kissFile className) (doPreload cc)))
(defReaderMacro &eof "" [stream]
    `(#when (StringTools.contains kissFile className)
        // When all loading is done, start obs recording automatically:
        (#when debug
            (preload
                (when projectObsFolder
                    (let [os (Sys.systemName)
                            profileDir "${projectObsFolder}/${os}_Profile"
                            sceneCollectionFile "${projectObsFolder}/${os}_SceneCollection.json"]
                        (if (and (sys.FileSystem.exists profileDir) (sys.FileSystem.exists sceneCollectionFile))
                                {
                                    (new sys.io.Process
                                        (case os
                                            ("Linux" "obs")
                                            (otherwise (throw "OBS executable not defined for ${os}")))
                                        [
                                            "--profile"
                                            profileDir
                                            "--collection"
                                            sceneCollectionFile
                                            "--scene"
                                            "Scene"
                                            "--startrecording"
                                            "--minimize-to-tray"
                                            "--multi"
                                        ])
                                    (set obsIsRecording true)
                                }
                            (print "OBS profile and scene collection not found for ${os} in ${projectObsFolder}. Will not be recording"))))))
        (end)))