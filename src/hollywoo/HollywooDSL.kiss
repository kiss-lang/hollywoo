(importWithDefAlias)
(import hollywoo.StagePosition)
(import kiss_tools.JsonFloat)
(import hollywoo.Director.Appearance)
(import hollywoo.Director.StageFacing)
(import hollywoo.Director.Continuation)

// like withProp, but you promise to call CC yourself in the body:
(defMacro withPropCC [propKey name &body body]
    `(let [realKey (kiss.FuzzyMapTools.bestMatch props ,propKey)
            ,name (dictGet props realKey)]
        (dictSet dirtyProps realKey true)
        ,@body))
        
(defMacro withProp [propKey name &body body]
    `(withPropCC ,propKey ,name
        (assert !isLoading)
        ,@body
        (cc)))

// like withActor, but you promise to call CC yourself in the body:
(defMacro withActorCC [actorKey name &body body]
    `(let [realKey (kiss.FuzzyMapTools.bestMatch actors ,actorKey)
            ,name (dictGet actors ,actorKey)]
        (dictSet dirtyActors realKey true)
        ,@body))

(defMacro withActor [actorKey name &body body]
    `(withActorCC ,actorKey ,name
        (assert !isLoading)
        ,@body
        (cc)))

// Do something with the given scene's instance of its set
(defMacro withSceneSet [sceneKey name &body body]
    `(let [,name .set (dictGet scenes ,sceneKey)]
        (assert !isLoading)
        ,@body
        (cc)))

// like withSceneSet, but you promise to call CC yourself in the body:
(defMacro withSceneSetCC [sceneKey name &body body]
    `(let [,name .set (dictGet scenes ,sceneKey)]
        ,@body))

// When this file is loaded, all expressions in (preload <...>) will be collected. When (end) is called, they will
// be injected into a method called (doPreload).
// This allows assets to be declared in Hollywoo files where they first appear, but still loaded before execution starts.
(collectBlocks preload)
(collectBlocks cleanup)

(defMacro end []
    (let [collectedPreloads (getCollectedExps "preload")
            preloadFuncs
                (for exp collectedPreloads
                    `->:Void {
                        (Prelude.print ,(Reader.toString exp.def))
                        ,exp
                    })]
        `{
            @:keep
            (method checkPlayMode [:Void->Void cc]
                (case hollywoo.Movie.playMode
                    (NotSet
                        (hollywoo.Movie.choosePlayMode director cc))
                    (otherwise
                        (cc))))
            @:keep
            (method doPreload [:Void->Void cc]
                (subclassDoPreload)

                // set director input setting according to watch mode/play mode
                (set delayHandling
                    (case hollywoo.Movie.playMode
                        (Read Manual)
                        (Watch AutoWithSkip)
                        (never otherwise)))

                (set isLoading true)
                (localFunction :Void done []
                    (.start (director.shortcutHandler))
                    (director.hideTitleCard true))
                (localFunction :Void cont []
                    (set didLoading true)
                    (set isLoading false)
                    (print "Had to load ${loadedObjects}/${loadCalls} objects newly")
                    (cc))
                (director.showTitleCard ["LOADING"]
                    (makeCC ->:Void {(done)(cont)}
                        (let [loadVoiceTrack _loadVoiceTrack
                                addVoiceTrack _addVoiceTrack
                                noVoiceTracks _noVoiceTracks
                                loadProp _loadProp
                                addProp _addProp
                                loadSong _loadSong
                                addSong _addSong
                                loadActor _loadActor
                                addActor _addActor
                                loadSet _loadSet
                                addSet _addSet
                                newSceneFromSet _newSceneFromSet
                                loadSound _loadSound
                                addSound _addSound]
                            (director.doLoading ,preloadFuncs
                                scavenged
                                (makeCC null
                                    (cont))
                                (makeCC null
                                    (done))))) true))

            (prop &mut cleanupDone false)
            @:keep
            (method doCleanup []
                (when cleanupDone (return))
                (set cleanupDone true)
                (director.cleanup)
                (set lastInstructionPointer -2)
                (set instructions null)
                (collectedBlocks cleanup)
                (stagePositions.m.clear)
                (lightSources.m.clear)
                (delayLengths.m.clear)
                (voiceLineMatches.m.clear)
                (sceneMusic.clear)
                (sceneMusicVolume.clear)
                )
            (doCleanup)
            
            (when onComplete
                (onComplete))
        }))

(defReaderMacro &bof "" [stream]
    `(#when
        (StringTools.contains kissFile className)
        (checkPlayMode ->:Void (doPreload cc))))
(defReaderMacro &eof "" [stream]
    `(#when (StringTools.contains kissFile className)
        (prop &mut ccAllErrors false)
        (preload
            (set onError ->[e quit cc] {
                (when ccAllErrors (cc)(return))
                (let [&mut errorString "${e}"]
                    (when (> errorString.length 80)
                        (set errorString "$(errorString.substr 0 77)..."))
                    (director.chooseString
                        "Error ${errorString}. Continue?"
                        ["Yes" "Yes to all" "Quit"]
                        ->choice
                            (case choice
                                ("Yes" (cc))
                                ("Yes to all" (set ccAllErrors true)(cc))
                                ("No" (quit))
                                (never otherwise))))
            }))

        // Prepare the interpreter for this movie's cached instructions
        (preload
            (let [v interpVariables]
                (dictSet v "TowardsCharacter" hollywoo.Director.StageFacing.TowardsCharacter)
                (dictSet v "AwayFromCharacter" hollywoo.Director.StageFacing.AwayFromCharacter)
                (dictSet v "TowardsPosition" hollywoo.Director.StageFacing.TowardsPosition)
                (dictSet v "AwayFromPosition" hollywoo.Director.StageFacing.AwayFromPosition)))

        (cleanup
            (hideCustomDialog ->:Void {})
            (#when debug
                (stopPromptedRecording)))
            
        (end)))