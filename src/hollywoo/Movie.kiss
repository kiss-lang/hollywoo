(defMacro makeCC [&body b]
    `->:Void {,@b})

(function dynamicArray [&rest :Array<Dynamic> elements]
    elements)

// This file is designed to be loaded again by subclasses, with macroVar "subclass" set
(#unless subclass
    // Settings
    (savedVar :Bool showCaptions false)
    (var MAX_CAPTION_DURATION 3)
    (prop &mut :Int captionId 0)

    (prop :Array<HistoryElement<Actor>> dialogHistory [])

    // Mostly immutable, reusable resources:
    (prop :FuzzyMap<Set> sets (new FuzzyMap<Set>))
    (prop :FuzzyMap<Actor> actors (new FuzzyMap<Actor>))
    (prop :FuzzyMap<Sound> sounds (new FuzzyMap<Sound>))
    (prop :FuzzyMap<String> soundDescriptions (new FuzzyMap<String>))
    (prop :FuzzyMap<Song> songs (new FuzzyMap<Song>))
    (prop :FuzzyMap<Prop> props (new FuzzyMap<Prop>))
    (prop :Map<String,VoiceTrack> voiceTracks (new Map))
    (prop :Map<String,CustomDialogTypeHandler<Actor>> _customDialogTypeHandlers (new Map))
    (prop :FuzzyMap<FuzzyMap<VoiceLine>> voiceLines (new FuzzyMap<FuzzyMap<VoiceLine>>))
    
    // Used to give unique, persistent IDs to voice tracks
    (prop :Map<String,Int> voiceTracksPerActor (new Map))

    (prop &mut :DelayHandling delayHandling AutoWithSkip)
    
    (prop &mut :String lastDelay "")
    (prop &mut :Float lastDelayLength 0)


    // Mutable representation of frames in time:
    (prop :FuzzyMap<Scene<Set,Actor,Prop,Camera>> scenes (new FuzzyMap<Scene<Set,Actor,Prop,Camera>>))

    (prop :Map<String,Bool> shownScenes (new Map))
    (prop :Map<String,Bool> shownProps (new Map))
    (prop :Map<String,Bool> shownCharacters (new Map))

    // This is set and unset by doPreload defined in HollywooDSL.kiss
    (prop &mut isLoading false)

    (function :Appearance appearanceFlag [:Map<String,Bool> map :String key]
        (if (dictGet map key)
                ReAppearance
            {
                (dictSet map key true)
                FirstAppearance
            }))

    (prop &mut :String sceneKey "")
    (method _currentScene [] (dictGet scenes sceneKey))

    (prop &mut :FuzzyMap<String> intercutMap)
    (prop &mut :Map<String,Int> altIdx (new Map))
    (method :Void processIntercut [actorName :Continuation cc]
        (when intercutMap
            (whenLet [sceneForActor (try (dictGet intercutMap actorName) (catch [e] null))]
                (unless (= sceneForActor sceneKey)
                    (setScene sceneForActor cc)
                    (return))))
        (cc))
    
    (prop :Map<String,Bool> _silentCustomDialogTypes (new Map))
    (savedVar :Bool playVoiceTracksForSilentDialog false)
    (method registerCustomDialogTypeHandler [:String key :CustomDialogTypeHandler<Actor> handler &opt :Bool isSilent]
        (_customDialogTypeHandlers.set key handler)
        (when ?isSilent (dictSet _silentCustomDialogTypes key true)))
    
    (prop &mut :Void->Void _hideCustomDialog null)
    (method :Void showDialog [actorName dialogType wryly text cc]
        // Hide custom dialog when the next dialog appears unless HIDECUSTOMDIALOG is called manually:
        (when _hideCustomDialog
            (_hideCustomDialog)
            (set _hideCustomDialog null))
        (dialogHistory.push (Dialog actorName dialogType wryly text))
        (processIntercut actorName
            (makeCC
                (let [isSilentType
                            ?(whenLet [(Custom type _ _) dialogType]
                                (_silentCustomDialogTypes.exists type))
                        cc ->:Void {(director.hideDialog) (cc)}
                        &mut customCC cc
                        &mut skipCC cc]
                    // When an actorName is given, check for a voiced line to play.
                    // Otherwise, assume it is un-voiced super text
                    (when (and (or !isSilentType playVoiceTracksForSilentDialog) actorName (< 0 (count voiceTracks)))
                            (case
                                (let [voiceLineKey
                                            (if (voiceLineMatches.exists text)
                                                    .value (voiceLineMatches.get text)
                                                (FuzzyMapTools.bestMatch (dictGet voiceLines actorName) text false))]
                                    (if voiceLineKey
                                            {
                                                (#when debug
                                                    (voiceLineMatches.put text (new JsonableString voiceLineKey)))
                                                (dictGet (dictGet voiceLines actorName) voiceLineKey)
                                            }
                                        null))
                                ((objectWith trackKey start end alts)
                                    (case (dictGet altIdx "$actorName $text")
                                        (null
                                            (dictSet altIdx "$actorName $text" 0)
                                            (set customCC ->:Void {})
                                            (director.playVoiceTrack (dictGet voiceTracks trackKey) 1 start end cc))
                                        ((when (>= idx alts.length) idx)
                                            (dictSet altIdx "$actorName $text" 0)
                                            (set customCC ->:Void {})
                                            (director.playVoiceTrack (dictGet voiceTracks trackKey) 1 start end cc))
                                        (idx
                                            (let [alt (nth alts idx)
                                                    start alt.start
                                                    end alt.end]
                                                (+= (dictGet altIdx "$actorName $text") 1)
                                                (set customCC ->:Void {})
                                                (director.playVoiceTrack (dictGet voiceTracks trackKey) 1 start end cc))))
                                    
                                    (set skipCC ->:Void {(director.stopVoiceTrack (dictGet voiceTracks trackKey)) (cc)}))
                                ((objectWith trackKey start end)
                                    (director.playVoiceTrack (dictGet voiceTracks trackKey) 1 start end cc)
                                    (set skipCC ->:Void {(director.stopVoiceTrack (dictGet voiceTracks trackKey)) (cc)}))
                                (otherwise)))
                    (case dialogType
                        ((Custom type character args)
                            (ifLet [handler (dictGet _customDialogTypeHandlers type)]
                                    (let [cleanupFunc (handler actorName character wryly args text skipCC customCC)]
                                        (set _hideCustomDialog cleanupFunc))
                                (throw "No handler for custom dialog type $type")))
                        (otherwise (director.showDialog actorName dialogType wryly text skipCC)))))))

    (method newVoiceTrack [actorName :VoiceTrack track :String lineJson]
        (let [actorNumVoiceTracks (or (dictGet voiceTracksPerActor actorName) 0)
                trackKey "${actorName}${actorNumVoiceTracks}"
                :haxe.DynamicAccess<Dynamic> lines (Json.parse lineJson)]
            (dictSet voiceTracksPerActor actorName (+ 1 actorNumVoiceTracks))
            (dictSet voiceTracks trackKey track)
            (doFor =>key line (lines.keyValueIterator)
                (let [:Array<VoiceLine> alts
                            (if line.alts
                                    (for alt (the Array<Dynamic> line.alts) (objectWith [start alt.start end alt.end] trackKey))
                                [])]
                    (unless (voiceLines.existsExactly actorName)
                        (dictSet voiceLines actorName (new FuzzyMap<VoiceLine>)))
                    (dictSet (dictGet voiceLines actorName) key (objectWith [start line.start end line.end] trackKey alts))))))

    (method _ccForEach <>[T] [:Iterable<T> collection :(T,Continuation)->Void do_ :Continuation finalCC]
        (let [:Iterator<T> iter (collection.iterator)]
            (withFunctions
                [
                    (:Void doNext []
                        (if (iter.hasNext)
                                (do_ (iter.next) doNext)
                            (finalCC)))
                ]
                (doNext))))

    (method _hideCurrentScene [:Continuation cc]
        (if sceneKey
                // hide current scene background
                (let [currentScene (dictGet scenes sceneKey)]
                    (director.hideLighting)
                    (director.hideSet currentScene.set currentScene.camera
                        (makeCC
                            // hide current scene characters 
                            (_ccForEach 
                                currentScene.characters
                                ->[:Character<Actor> c :Continuation cc]
                                    (director.hideCharacter c currentScene.camera cc)
                                (makeCC
                                    // hide current scene props, etc.
                                    (_ccForEach
                                        currentScene.props
                                        ->[:StageProp<Prop> p :Continuation cc]
                                            (director.hideProp p.prop currentScene.camera cc)
                                        cc))))))
            (cc)))
    
    (method _showScene [:Scene<Set,Actor,Prop,Camera> scene :Appearance appearance :Camera camera :Continuation cc]
        (director.showLighting scene.time .elements (lightSources.get (FuzzyMapTools.bestMatch scenes sceneKey)) camera)
        // Show current scene background
        (director.showSet scene.set scene.time scene.perspective appearance camera
            (makeCC
                // Show current scene characters 
                (_ccForEach 
                    (object iterator ->(scene.characters.keys))
                    ->[:String key :Continuation cc]
                        (director.showCharacter (dictGet scene.characters key) (appearanceFlag shownCharacters key) camera cc)
                    (makeCC
                        // show current scene props, etc.
                        (_ccForEach
                            scene.props
                            ->[:StageProp<Prop> p :Continuation cc]
                                (director.showProp p.prop p.position ReAppearance .camera (_currentScene) cc)
                            cc))))))

    (#when debug
        (prop &mut :String projectObsFolder null)
        (prop &mut :Bool obsIsRecording false))

    (method stopObs []
        (#when debug
            (when obsIsRecording
                // kill the obs process
                (case (Sys.systemName)
                    ("Linux"
                        (doFor id (reverse (.split (assertProcess "pgrep" ["obs"]) "\n"))
                            (assertProcess "kill" [id])))
                    (otherwise (throw "OBS executable not defined for $(Sys.systemName)"))))))

    (prop &mut :Bool paused false)
    (prop &mut :Continuation onComplete null)

    (method pause []
        (unless paused
            (stopObs)
            (TimerWithPause.pause)
            (set paused true)
            (director.pause)))

    (method resume []
        (when paused
            (set paused false)
            (director.resume)
            (TimerWithPause.resume)))

    (prop :Map<String,Array<String>> positionsInScene (new Map))
    (method resolvePosition [:Dynamic position]
        (typeCase [position]
            ([:String positionKey]
                (let [positionsInThisScene (dictGet positionsInScene sceneKey)]
                    (unless (positionsInThisScene.contains positionKey)
                        (positionsInThisScene.push positionKey)))
                (stagePositions.get positionKey))
            ([:StagePosition position]
                position)
            (otherwise (throw "Not a position or position key: $position"))))

    (#when (or sys hxnodejs)
        (prop :FuzzyMap<FuzzyMap<String>> assetPaths (new FuzzyMap))
        (prop :Array<Array<String>> loadedCredits [])
        (method _indexAssetPaths [:String assetDir]
            (let [dirParts (assetDir.split "/")]
                (doFor part dirParts
                    (dictSet assetPaths part (new FuzzyMap))))
            (walkDirectory "" assetDir
                ->file (ifLet [[:: ...dirs basename] (file.split "/")
                                    ext (Path.extension file)
                                    noExt (Path.withoutExtension file)
                                    overrideEndings [
                                        "Edited"
                                        "-edited"
                                    ]
                                    overrideExtensions [
                                        "$ext"
                                        "png" // It's common to edit a jpg into a png
                                        "wav" // or an ogg into a wav
                                        "ogg" // or an mp3 into an ogg
                                    ]
                                    overridePath file]
                                {
                                    (unless (= ext "tsv")
                                        (doFor [ending extension] (intersect overrideEndings overrideExtensions)
                                            (let [possibleOverride "${noExt}${ending}.${extension}"]
                                                (when (sys.FileSystem.exists possibleOverride)
                                                    (#when debug
                                                        (print "$file overridden by $possibleOverride"))
                                                    (set overridePath possibleOverride)
                                                    (break)))))
                                    (doFor dir dirs
                                        (dictSet (dictGet assetPaths dir) basename overridePath))
                                }
                            (print "Warning: asset $file cannot be indexed"))
                ->folderToFilter (assertLet [[:: ... dir] (folderToFilter.split "/")]
                                    (unless (assetPaths.existsExactly dir)
                                        (dictSet assetPaths dir (new FuzzyMap)))
                                    false)))

        (method assetPath [directory filename]
            (let [dirMap (dictGet assetPaths directory)
                    basename (FuzzyMapTools.bestMatch dirMap filename)
                    noExt (Path.withoutExtension basename)
                    tsv "${noExt}.tsv"]
                (if (dirMap.existsExactly tsv)
                        (let [tsvContent (sys.io.File.getContent (dictGet dirMap tsv))]
                            (loadedCredits.push (tsvContent.split "\t")))
                    (print "Warning: no credit tsv file for ${directory}/${filename}"))
                (dictGet dirMap basename))))

    (defNew
        [
            // "View" in the Model-View-Controller architecture:
            &prop :Director<Set,Actor,Sound,Song,Prop,VoiceTrack,Camera,LightSource> director
            :String lightSourceJsonFile
            :LightSource defaultLightSource
            :String stagePositionsJson
            :String delayLengthsJson
            :String voiceLineMatchesJson
        ]
        [
            :JsonMap<StagePosition> stagePositions
                (new JsonMap stagePositionsJson (new StagePosition 0 0 0))
            :JsonMap<JsonableArray<LightSource>> lightSources
                (new JsonMap lightSourceJsonFile (new JsonableArray [] defaultLightSource))
            :JsonMap<HFloat> delayLengths
                (new JsonMap delayLengthsJson (new HFloat 0.5))
            :JsonStringMap voiceLineMatches
                (new JsonMap voiceLineMatchesJson (new JsonableString ""))
        ]

        (set director.movie this)

        (let [shortcutHandler (director.shortcutHandler)
                cc ->(resume)]
            (set shortcutHandler.onSelectItem
                ->process {
                    (pause)
                    // TODO this is dicey but it allows processes to use the handler:
                    (shortcutHandler.start)
                    (process cc)
                })
            (set shortcutHandler.onBadKey
                ->[_ _]
                    (when shortcutHandler.currentMap
                        (shortcutHandler.start)))
            (shortcutHandler.registerItem "{escape} Pause the movie"
                ->cc (director.showPauseMenu cc))
            (shortcutHandler.registerItem "{tab} show dialog history"
                ->cc (director.showDialogHistory dialogHistory cc))
            
            (#when debug
                (shortcutHandler.registerItem "[d]efine [d]elay"
                    ->cc
                        (director.enterString "Redefine $lastDelay from $lastDelayLength sec?" 
                            ->lengthStr
                                (let [length (Std.parseFloat lengthStr)]
                                    (delayLengths.put lastDelay (new HFloat length))
                                    (cc))))
                (shortcutHandler.registerItem "[d]efine [p]osition"
                    ->cc
                        (director.chooseString "Which position?" (dictGet positionsInScene sceneKey)
                            ->positionKey
                                (director.defineStagePosition
                                    .camera (_currentScene)
                                    ->[:StagePosition position] {
                                        (stagePositions.put positionKey position)
                                        (cc)
                                    }
                                    (stagePositions.get positionKey))))
                (shortcutHandler.registerItem "[d]efine [l]ight source"
                    ->cc
                        (director.defineLightSource
                            ->[:LightSource source] {
                                (let [arr (lightSources.get sceneKey)]
                                    (arr.elements.push source)
                                    (lightSources.put sceneKey arr)
                                    (director.hideLighting)
                                    (director.showLighting .time (_currentScene) arr.elements .camera (_currentScene))
                                    (cc))
                            }))
                (shortcutHandler.registerItem "[r]emove [l]ight source"
                    ->cc
                        (let [arr (lightSources.get sceneKey)
                                stringArr (for ls arr (ls.stringify))
                                stringMap (for [key ls] (zipThrow stringArr arr) =>key ls)]
                            (director.chooseString "Remove which light source?" stringArr
                                ->choice
                                    (let [ls (dictGet stringMap choice)]
                                        (arr.elements.remove ls)
                                        (lightSources.put sceneKey arr)
                                        (director.hideLighting)
                                        (director.showLighting .time (_currentScene) arr.elements .camera (_currentScene))
                                        (cc)))))

                (shortcutHandler.registerItem "[n]ext label"
                    ->cc
                        (skipToNextLabel))
                (shortcutHandler.registerItem "skip to [l]abel"
                    ->cc
                        (let [runners (labelRunners)]
                            (director.chooseString
                                "Skip to scene?"
                                (sort (collect (runners.keys)))
                                ->label {
                                            (resume)
                                            ((dictGet runners label))
                                        })))))

        (super)))

// END Parent class definitions

(defMacro indexAssetPaths [dir]
    `(preload
        (_indexAssetPaths ,dir)))

// Some real magic happens here. This macro defines a method, AND a reader macro
// for calling it with cc passed automatically if cc is an argument.
// GOTCHA: DO NOT use (method) directly in this file!!
(defMacro hollywooMethod [nameAndType canSkip argList &builder b &body body]
    (let [args (expList argList)
            numArgs args.length
            methodName (symbolNameValue nameAndType true)
            &mut readerMacroStart "$(.toUpperCase methodName) "]
        (when (= 1 numArgs) (set readerMacroStart (StringTools.trim readerMacroStart)))
        `{
            (defReaderMacro ,readerMacroStart [stream &builder b]
                (let [nextLineStream
                            (stream.expect "hollywoo macro line" ->(stream.takeLineAsStream))
                        methodCall
                            (b.callSymbol
                                ,methodName
                                ,(for arg args
                                    (if (= "cc" (symbolNameValue arg true true))
                                            (b.callSymbol "b.symbol" [(b.str "cc")])
                                        (b.callSymbol "try" [
                                                (b.callSymbol "read" [(b.symbol "nextLineStream")])
                                                // optional arguments may not be present:
                                                (b.callSymbol "catch" [(b.list [(b.symbol "e")]) (b.callSymbol "b.symbol" [(b.str "null")])])
                                            ]))))]
                    (if ,canSkip methodCall (b.callSymbol "noSkip" [methodCall]))))
            (#unless subclass @:keep (method ,nameAndType ,argList ,@body))
        }))

(hollywooMethod :Void hideCustomDialog true [:Continuation cc]
    (when _hideCustomDialog
        (_hideCustomDialog)
        (set _hideCustomDialog null)))

(hollywooMethod :Void delay true [:Dynamic length :Continuation cc]
    (let [sec (typeCase [length]
                    ([:Float sec] sec)
                    ([:String key]
                        (let [lengthFloat .value (delayLengths.get key)]
                            (set lastDelay key)
                            (set lastDelayLength lengthFloat)
                            lengthFloat))
                    (never otherwise))]
        (case delayHandling
            (Auto
                (TimerWithPause.delay cc sec))
            (AutoWithSkip
                (let [autoDelay
                            (TimerWithPause.delay
                                ->{
                                    (director.stopWaitForInput cc)
                                    (cc)
                                }
                                sec)]
                    (director.startWaitForInput 
                        ->{
                            (director.stopWaitForInput cc)
                            (TimerWithPause.stop autoDelay)
                            (cc)
                        })))
            (Manual
                (director.startWaitForInput
                    ->{
                        (director.stopWaitForInput cc)
                        (cc)
                    }))
            (otherwise (throw "Unsupported delay type $delayHandling")))))

(hollywooMethod newSet true [name :Set set]
    (assert isLoading)
    (dictSet sets name set))

(hollywooMethod newSceneFromSet true [name :String setKey :SceneTime time :ScenePerspective perspective :Camera camera]
    (assert isLoading)
    (dictSet scenes name (objectWith
                                [
                                    set
                                        (.clone (dictGet sets setKey))
                                    characters
                                        (new FuzzyMap<Character<Actor>>)
                                    props
                                        (new FuzzyMap<StageProp<Prop>>)
                                    camera
                                        camera
                                ]
                                time
                                perspective)))

(hollywooMethod setScene false [name :Continuation cc]
    (_hideCurrentScene
        (makeCC
            (let [name (FuzzyMapTools.bestMatch scenes name)]
                (set sceneKey name)
                (unless (positionsInScene.exists sceneKey)
                    (dictSet positionsInScene sceneKey []))
                (_showScene
                    (dictGet scenes name)
                    (appearanceFlag shownScenes name)
                    .camera (dictGet scenes name)
                    cc)))))
    

(hollywooMethod newSound true [name :Sound s :String description]
    (assert isLoading)
    (dictSet sounds name s)
    (dictSet soundDescriptions name description))

(hollywooMethod playSound true [name :Continuation cc &opt :Float volumeMod :Bool waitForEnd]
    (set volumeMod (or volumeMod 1))
    (assert (<= 0 volumeMod 1))
    (localVar &mut :Null<Int> id null)
    (whenLet [desc (dictGet soundDescriptions name)]
        (dialogHistory.push (Sound desc)))
    (when showCaptions
        (whenLet [desc (dictGet soundDescriptions name)]
            (set id captionId++)
            (director.showCaption desc id)))
    (let [sound (dictGet sounds name)]
        (when (and showCaptions id)
            (delay (min MAX_CAPTION_DURATION (director.getSoundLength sound))
                (makeCC
                    (director.hideCaption id))))
        (director.playSound sound volumeMod ?waitForEnd cc)))

(hollywooMethod awaitPlaySound true [name :Continuation cc &opt :Float volumeMod]
    (playSound name cc volumeMod true))

(hollywooMethod stopSound true [name :Continuation cc]
    (director.stopSound (dictGet sounds name))
    (cc))

(hollywooMethod newSong true [name :Song song]
    (assert isLoading)
    (dictSet songs name song))

(hollywooMethod playSong true [name :Continuation cc &opt :Float volumeMod :Bool loop :Bool waitForEnd]
    (set volumeMod (or volumeMod 1))
    (assert (<= 0 volumeMod 1))
    (director.playSong (dictGet songs name) volumeMod ?loop ?waitForEnd cc))

(hollywooMethod awaitPlaySong true [name :Continuation cc &opt :Float volumeMod]
    (playSong name cc volumeMod false true))
    
(hollywooMethod loopSong true [name :Continuation cc &opt :Float volumeMod]
    (playSong name cc volumeMod true false))

(hollywooMethod stopSong true [cc]
    (director.stopSong)
    (cc))

(hollywooMethod newActor true [name :Actor actor]
    (assert isLoading)
    (dictSet actors name actor))

(hollywooMethod autoZProcess false [:StagePosition position :Continuation cc]
    // handle auto z recursively
    (ifLet [(Some (objectWith zPerLayer frontLayer)) (director.autoZConfig)]
            {
                (doFor =>name otherCharacter .characters (_currentScene)
                    (when (and (= position.x otherCharacter.stagePosition.x) (= position.y otherCharacter.stagePosition.y) (= position.z otherCharacter.stagePosition.z))
                        (moveCharacter name (new StagePosition position.x position.y (+ otherCharacter.stagePosition.z zPerLayer)) otherCharacter.stageFacing cc)
                        (return)))
                (cc)
            }
        (cc)))

(hollywooMethod addCharacter false [actorName :Dynamic position :StageFacing facing :Continuation cc]
    (let [actorName (FuzzyMapTools.bestMatch actors actorName)
            position (resolvePosition position)
            character (object stagePosition position stageFacing facing actor (dictGet actors actorName))]
        (autoZProcess position
            (makeCC
                (dictSet .characters (_currentScene) actorName character)
                (director.showCharacter
                    character
                    (appearanceFlag shownCharacters actorName)
                    .camera (_currentScene)
                    cc))))) 

(hollywooMethod removeCharacter false [actorName :Continuation cc]
    (let [c (dictGet .characters (_currentScene) actorName)]
        (.remove .characters (_currentScene) actorName)
        (director.hideCharacter c .camera (_currentScene) cc)))

(hollywooMethod clearCharacters false [:Continuation cc]
    (doFor =>name c .characters (_currentScene)
        (director.hideCharacter c .camera (_currentScene) (makeCC null))
        (.remove .characters (_currentScene) name))
    (cc))

// INSTANTLY move a character:
(hollywooMethod moveCharacter false [actorName :Dynamic newPosition :StageFacing newFacing :Continuation cc]
    (removeCharacter actorName
        (makeCC
            (addCharacter actorName newPosition newFacing cc))))

// INSTANTLY swap characters
(hollywooMethod swapCharacters false [actorNameA actorNameB :Continuation cc]
    // remove both, then re-add both, so they don't trigger 
    // cascading auto z adjustments on top of each other:
    (let [a (dictGet .characters (_currentScene) actorNameA)
            asp a.stagePosition
            asf a.stageFacing
            b (dictGet .characters (_currentScene) actorNameB)
            bsp b.stagePosition
            bsf b.stageFacing]
        (removeCharacter actorNameA
            (makeCC
                (removeCharacter actorNameB
                    (makeCC
                        (addCharacter actorNameA bsp bsf
                            (makeCC
                                (addCharacter actorNameB asp asf cc)))))))))

// TODO moveCharacter remove them, add them to another scene
// TODO moveCharacterAndFollow remove them, add them to another scene, set that the scene

(hollywooMethod newProp true [name :Prop prop]
    (assert isLoading)
    (dictSet props name prop))

(hollywooMethod addProp false [name :Dynamic position :Continuation cc]
    (let [name (FuzzyMapTools.bestMatch props name)
            prop (dictGet props name)
            position (resolvePosition position)]
        (dictSet .props (_currentScene) name (objectWith position prop))
        (director.showProp prop position (appearanceFlag shownProps name) .camera (_currentScene) cc)))

(hollywooMethod removeProp false [name :Continuation cc]
    (.remove .props (_currentScene) name)
    (director.hideProp (dictGet props name) .camera (_currentScene) cc))

// Dialogue:

(hollywooMethod intercut false [:Map<String,String> actorNamesToSceneNames :Continuation cc]
    (set intercutMap (new FuzzyMap<String>))
    (doFor =>actor scene actorNamesToSceneNames
        (dictSet intercutMap actor scene))
    (cc))

(hollywooMethod endIntercut false [:Continuation cc]
    (set intercutMap null)
    (cc))

(hollywooMethod timedTitleCard true [time :Array<String> lines :Continuation cc]
    (let [cc ->{(director.hideTitleCard)(cc)}]
        (director.showTitleCard lines
            (makeCC
                // Allow skipping
                (director.startWaitForInput cc)
                (delay time cc)))))

// TODO themed titleCard (wait for song or sound)


(hollywooMethod superText true [text :Continuation cc]
    (dialogHistory.push (Super text))
    // Skip voice track handling:
    (director.showDialog "" Super "" text cc))

(hollywooMethod timedSuperText true [text :Dynamic sec :Continuation cc]
    (let [cc ->:Void {(director.hideDialog) (cc)}]
        (superText text cc)
        (delay sec cc)))

// TODO themed superText

(hollywooMethod normalSpeech true [actorName wryly text :Continuation cc]
    (processIntercut actorName
        (makeCC
            (showDialog actorName (OnScreen (dictGet .characters (_currentScene) actorName)) wryly text cc))))

(hollywooMethod offScreenSpeech true [actorName wryly text :Continuation cc]
    (showDialog actorName (OffScreen (dictGet actors actorName)) wryly text cc))

(hollywooMethod voiceOver true [actorName wryly text :Continuation cc]
    (showDialog actorName (VoiceOver (dictGet actors actorName)) wryly text cc))

(hollywooMethod onPhoneSpeech true [actorName wryly text :Continuation cc]
    (processIntercut actorName
        (makeCC
            (showDialog actorName (ifLet [charOnScreen (try (dictGet .characters (_currentScene) actorName) (catch [e] null))]
                                            (OnScreen charOnScreen)
                                        (FromPhone (dictGet actors actorName))) wryly text cc))))

(hollywooMethod customSpeech true [type actorName wryly args text :Continuation cc]
    (processIntercut actorName
        (makeCC
            (showDialog actorName (Custom type (dictGet .characters (_currentScene) actorName) args) wryly text cc))))

(hollywooMethod timedCutToBlack true [seconds :Continuation cc]
    (director.showBlackScreen)
    (delay seconds ->:Void {(director.hideBlackScreen)(cc)}))

(hollywooMethod cutToBlack true [:Continuation cc]
    (director.showBlackScreen)
    (cc))

(hollywooMethod endCutToBlack true [:Continuation cc]
    (director.hideBlackScreen)
    (cc))

(hollywooMethod rollCredits true [:String creditsTSV :Continuation cc &opt :Float timeLimit]
    (director.rollCredits
        (let [creditsData
                    (for line (.split .content (Stream.fromString creditsTSV) "\n") (line.split "\t"))
                headings
                    []    
                edgeCaseCredits
                    (new Map<String,String>)
                headingIndices
                    (new Map<String,Int>)
                headingData
                    (new Map<String,Array<Array<String>>>)]
            // Find headings
            (doFor [idx data] (enumerate creditsData)
                (case data
                    ((or [heading] [heading ""])
                        (headings.push heading)
                        (dictSet headingIndices heading idx)
                        (dictSet headingData heading []))
                    ((when (StringTools.endsWith heading ":") ["" heading])
                        (headings.push (substr heading 0 -1))
                        (dictSet headingIndices (substr heading 0 -1) idx)
                        (dictSet headingData (substr heading 0 -1) []))
                    (otherwise)))
            
            // Sort loadedCredits by headings and check for missing headings
            (doFor data loadedCredits
                (case data
                    ([heading credit _sourceOrUrl]
                        (ifLet [idx (dictGet headingIndices heading)]
                                (let [edgeCaseCredit (dictGet edgeCaseCredits heading)
                                        hd (dictGet headingData heading)
                                        // Push unless given a duplicate:
                                        hdPush ->:Void data
                                                    (let [dataStr (data.toString)]
                                                        (when (= credit edgeCaseCredit)
                                                            (return))
                                                        (doFor d hd
                                                            (when (= (d.toString) dataStr)
                                                                (return)))
                                                        (hd.push data))
                                        headingLineData (nth creditsData idx)]
                                    (case headingLineData
                                        ([heading ""]
                                            (dictSet edgeCaseCredits heading credit)
                                            (setNth headingLineData 1 credit))
                                        (["" heading]
                                            (hdPush ["" "   ${credit}"]))
                                        ((or [heading] [heading _])
                                            (hdPush ["" credit]))
                                        (never otherwise)))
                                
                            (throw "no heading $heading to place credit $data")))
                    (otherwise
                        (throw "unsupported credit data $data"))))

            // Insert sorted credits under headings
            (doFor heading (reverse headings)
                (let [idx (dictGet headingIndices heading)
                        hd (dictGet headingData heading)]
                    (doFor data (reverse hd)
                        (creditsData.insert (+ idx 1) data))))

            // Return the formatting enum list
            (for data creditsData
                (case data
                    ([]
                        Break)
                    ([col1]
                        (OneColumn col1))
                    ([col1 col2]
                        (TwoColumn col1 col2))
                    ([col1 col2 col3]
                        (ThreeColumn col1 col2 col3))
                    (otherwise
                        (throw "unsupported credits line $data")))))
        
        cc
        timeLimit))

(hollywooMethod themedRollCredits true [:String creditsTSV :String songKey :Continuation cc &opt :Float volumeMod]
    (playSong songKey (makeCC null) volumeMod)
    (rollCredits
        creditsTSV
        (makeCC
            (stopSong cc))
        (director.getSongLength (dictGet songs songKey))))